/*
 * webapp.nlg
 * WebbApp Example 1
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2021-2023 by Richard C. Zulch
 *
 */


/*
 * WebAppAdmin
 *
 *     The main WebAppAdmin application class.
 *
 */


lastVersion = false;
identitySave = false

closure WebAppAdmin(version, local webapp) {
    global(identitySave, lastVersion)
    webapp = new(object, this)
    webapp.contents = ContentDB()
    webapp.frames = FramesContainer(webapp)
    webapp.modalLogin = ModalLogin(webapp.frames)
    webapp.appNavbar = AppNavbar(webapp.frames)
    webapp.globalAlertDiv = document.getElementById("globalAlertArea")
    
    //
    // webapp.alert()
    //
    // Display an alert with the specified text and options. If the text starts with "<" then
    // it is assumed to be intentional HTML and no processing is performed. Otherwise the text
    // is escaped so that no inadvertent interpretation is done. Options are:
    // {
    //      class:      bootstrap-5 alert class, such as "alert-danger"; default is "alert-primary"
    //      timeout:    nnnn millisecond timeout, after which alert closes automatically
    //      noclose:    true to disable the close button
    // }
    //
    
    webapp.alert = closure(text, options, local alertTempDiv, ocDiv, bsAlert, earlier) {
        alertTempDiv = document.getElementById("closableAlertTemplate")
        ocDiv = alertTempDiv.cloneNode(true)
        ocDiv.id = ""
        setElementClass(ocDiv, "d-none", false)
        if options.class
            ocDiv.classList.add(options.class)
        else
            ocDiv.classList.add("alert-primary")
        if text.charAt(0) != "<"
            text = escapeHTML(text)                                         // escape text if not intentionally HTML
        ocDiv.innerHTML = ocDiv.innerHTML.replace("{alert-text}", text)
        if options.noclose
            ocDiv.removeChild(ocDiv.getElementsByClassName("close").0)
        earlier = webapp.globalAlertDiv.children[0]
        if earlier
            webapp.globalAlertDiv.insertBefore(ocDiv, earlier)               // put newer on top
        else
            webapp.globalAlertDiv.append(ocDiv)
        bsAlert = xnew(window.bootstrap.Alert, ocDiv)
        if options.timeout > 0
            future(close, options.timeout)                                  // closes automatically

        //
        // caller access functions
        //

        function close() {
            bsAlert.close()
        }

        function onClose(proc) {
            ocDiv.addEventListener("close.bs.alert", proc)
        }

        function onClosed(proc) {
            ocDiv.addEventListener("closed.bs.alert", proc)
        }

        {                                                                   // dictionary for caller to use
            close: close,                                                   // close the alert
            onClose: onClose,                                               // call proc on closing, start of fade-out
            onClosed: onClosed                                              // call proc on closed, after invisible
        }
    }

    // starClient
    //
    //
    closure starClient() {
        //
        // updateLoginState
        //
        function updateLoginState(local error, info) {
            `(error, info) = webapp.client.currentUserInfo()
                webapp.currentUserInfo = info
            if info {                                                       // we are logged in
                webapp.appNavbar.setCurrentUser(info)
                webapp.appNavbar.frame.selectPage("test")
            } else {                                                        // we are logged out
                webapp.appNavbar.setCurrentUser()
                webapp.appNavbar.frame.selectPage("home")
                future(function(){ webapp.modalLogin.authenticate() }, 10)
            }
        }

        webapp.clientMod = require("../webAppClient/wa_admin_client.nlg")
        webapp.client = webapp.clientMod.WacAdminClient(webapp)
        if !identitySave {
            identitySave = loadIdentity()                                   // saved value is fallback
            if !identitySave
                identitySave = {
                    email: "joe@fake.com"
                    password: "1234"
                }
        }
        webapp.client.open(identitySave, function(state) {
            identitySave = state                                            // state has been updated
            storeIdentity(identitySave)
            if state.email                                                  // we have logged in
                debuglog("notifyLogin")
            else
                debuglog("notifyLogout")
            updateLoginState()
        })
        updateLoginState()
    }

    // startup
    //
    //

    let() {
        webapp.appNavbar.frame.registerTab("users", "WebAppNavUsers", "WebAppPageUsers")
        webapp.appNavbar.frame.registerTab("content", "WebAppNavContent", "WebAppPageContent")
        
        webapp.appNavbar.frame.selectPage("home")
        if lastVersion != version {
            webapp.alert("New WebAppAdmin version ".concat(version), { timeout: 2000 })
            lastVersion = version
        }
        starClient()
        js.t.Working()                                                      // report that app is alive
    }()

    // finis
    webapp
};


/*
 * webAppInit
 *
 *     Load WebApp into the browser, whether for the first time or after reload.
 *
 */

function webAppInit(local manifest) {
    manifest = `(lastVersion, identitySave, WebAppAdmin, webAppInit)

    Naan.module.build(module.id, "webAppAdmin", function(modobj, compobj, local nideCommon) {
        compobj.manifest = manifest
        module.exports.WebAppAdmin = WebAppAdmin
        asyncArray([                                                        // load prerequisites in parallel
            "frameworks/common",
            "frames.nlg",
            "app_navbar.nlg",
            "modal_login.nlg",
            "util.nlg",
            "webapp.nlg"
        ], 20, closure(item) {
            require(item, { parent: modobj.namespace })
        }).wait()
        require("frameworks/common").LiveImport()

        // webAppReload
        // Reload the module
        function webAppReload() {
            window = js.w
            document = window.document
        }()
        module.reload = webAppReload
    })
} ();
